/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SalePokeballInterface extends ethers.utils.Interface {
  functions: {
    "ballContract()": FunctionFragment;
    "buyPokeball(uint8,uint256)": FunctionFragment;
    "currentRoundIndex()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "maxBallUserCanBuy()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueStuck(address,uint256,address)": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setMaxballCanBuy(uint256)": FunctionFragment;
    "setNFTContract(address)": FunctionFragment;
    "setupCurrentRoundIndex(uint256)": FunctionFragment;
    "setupLimitAmount(uint256,uint256)": FunctionFragment;
    "setupNewRound(uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "setupPaymentToken(uint256,address)": FunctionFragment;
    "setupPrice(uint256,uint256)": FunctionFragment;
    "setupRoundTime(uint256,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "users(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ballContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyPokeball",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maxBallUserCanBuy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueStuck",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxballCanBuy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupCurrentRoundIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setupLimitAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setupNewRound",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupPaymentToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setupRoundTime",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "ballContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyPokeball",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxBallUserCanBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueStuck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxballCanBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupCurrentRoundIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupLimitAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupNewRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setupRoundTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {
    "BuyPokeball(address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RescueStuck(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyPokeball"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RescueStuck"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type BuyPokeballEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    buyer: string;
    typeBall: BigNumber;
    amount: BigNumber;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RescueStuckEvent = TypedEvent<
  [string, string, BigNumber] & {
    tokenAddress: string;
    reciver: string;
    amount: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class SalePokeball extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SalePokeballInterface;

  functions: {
    ballContract(overrides?: CallOverrides): Promise<[string]>;

    buyPokeball(
      typeBall: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentRoundIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _ball: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxBallUserCanBuy(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueStuck(
      token: string,
      balance: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        startTime: BigNumber;
        endTime: BigNumber;
        limitAmount: BigNumber;
        currentAmount: BigNumber;
        price: BigNumber;
        paymentToken: string;
      }
    >;

    setMaxballCanBuy(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFTContract(
      _ball: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupCurrentRoundIndex(
      _roundIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupLimitAmount(
      _roundIndex: BigNumberish,
      _limitAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupNewRound(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _limit: BigNumberish,
      _price: BigNumberish,
      _paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupPaymentToken(
      _roundIndex: BigNumberish,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupPrice(
      _roundIndex: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupRoundTime(
      _index: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    users(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ballContract(overrides?: CallOverrides): Promise<string>;

  buyPokeball(
    typeBall: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentRoundIndex(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _ball: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxBallUserCanBuy(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueStuck(
    token: string,
    balance: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      startTime: BigNumber;
      endTime: BigNumber;
      limitAmount: BigNumber;
      currentAmount: BigNumber;
      price: BigNumber;
      paymentToken: string;
    }
  >;

  setMaxballCanBuy(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFTContract(
    _ball: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupCurrentRoundIndex(
    _roundIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupLimitAmount(
    _roundIndex: BigNumberish,
    _limitAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupNewRound(
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _limit: BigNumberish,
    _price: BigNumberish,
    _paymentToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupPaymentToken(
    _roundIndex: BigNumberish,
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupPrice(
    _roundIndex: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupRoundTime(
    _index: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ballContract(overrides?: CallOverrides): Promise<string>;

    buyPokeball(
      typeBall: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentRoundIndex(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_ball: string, overrides?: CallOverrides): Promise<void>;

    maxBallUserCanBuy(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueStuck(
      token: string,
      balance: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        startTime: BigNumber;
        endTime: BigNumber;
        limitAmount: BigNumber;
        currentAmount: BigNumber;
        price: BigNumber;
        paymentToken: string;
      }
    >;

    setMaxballCanBuy(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTContract(_ball: string, overrides?: CallOverrides): Promise<void>;

    setupCurrentRoundIndex(
      _roundIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setupLimitAmount(
      _roundIndex: BigNumberish,
      _limitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setupNewRound(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _limit: BigNumberish,
      _price: BigNumberish,
      _paymentToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setupPaymentToken(
      _roundIndex: BigNumberish,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setupPrice(
      _roundIndex: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setupRoundTime(
      _index: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "BuyPokeball(address,uint256,uint256)"(
      buyer?: string | null,
      typeBall?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; typeBall: BigNumber; amount: BigNumber }
    >;

    BuyPokeball(
      buyer?: string | null,
      typeBall?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; typeBall: BigNumber; amount: BigNumber }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RescueStuck(address,address,uint256)"(
      tokenAddress?: null,
      reciver?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { tokenAddress: string; reciver: string; amount: BigNumber }
    >;

    RescueStuck(
      tokenAddress?: null,
      reciver?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { tokenAddress: string; reciver: string; amount: BigNumber }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    ballContract(overrides?: CallOverrides): Promise<BigNumber>;

    buyPokeball(
      typeBall: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentRoundIndex(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _ball: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxBallUserCanBuy(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueStuck(
      token: string,
      balance: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setMaxballCanBuy(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFTContract(
      _ball: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupCurrentRoundIndex(
      _roundIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupLimitAmount(
      _roundIndex: BigNumberish,
      _limitAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupNewRound(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _limit: BigNumberish,
      _price: BigNumberish,
      _paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupPaymentToken(
      _roundIndex: BigNumberish,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupPrice(
      _roundIndex: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupRoundTime(
      _index: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ballContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyPokeball(
      typeBall: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentRoundIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _ball: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxBallUserCanBuy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueStuck(
      token: string,
      balance: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMaxballCanBuy(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFTContract(
      _ball: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupCurrentRoundIndex(
      _roundIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupLimitAmount(
      _roundIndex: BigNumberish,
      _limitAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupNewRound(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _limit: BigNumberish,
      _price: BigNumberish,
      _paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupPaymentToken(
      _roundIndex: BigNumberish,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupPrice(
      _roundIndex: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupRoundTime(
      _index: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
